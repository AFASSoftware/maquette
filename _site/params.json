{"name":"Domplotter","tagline":"Domplotter is a minimalistic Virtual DOM implementation which supports animated transitions.","body":"Domplotter\r\n=========\r\n\r\nDomplotter is a Javascript library which makes it easy to synchronize the DOM tree in the browser with your data.\r\nIt uses a technique called 'Virtual DOM'. \r\nCompared to other virtual DOM implementations, domplotter has 3 advantages:\r\n\r\n* It is very lightweight (2Kb gzipped)\r\n* It allows changes to be animated\r\n* It is optimized for speed\r\n\r\nWhile domplotter is only focussed around the view of an application, we believe it is complete enough\r\nto power a fully functional web application without needing yet another Javascript library.\r\n\r\nDomplotter allows you to write a `render()` function that turns your data into a virtual representation \r\nof the DOM tree.\r\nDomplotter will execute that function at convenient moments and adjust the DOM tree in the browser\r\naccordingly.\r\n\r\nThe following code shows this mechanism in its most basic form:\r\n\r\n```js\r\n// Data\r\nvar name = \"\";\r\n\r\n// Event handler for the 'input' event on the 'name' input\r\nvar nameInputHandler = function (evt) {\r\n  name = evt.target.value;\r\n};\r\n\r\n// Renders the virtual DOM\r\nvar render = function () {\r\n  return h(\"body\", [\r\n    h(\"p.input\", [\r\n      h(\"span\", [\"What is your name? \"]),\r\n      h(\"input\", { type: \"text\", autofocus: true, value: name, oninput: nameInputHandler })\r\n    ]),\r\n    name ? h(\"p.output\", [\"Hello \" + name + \"!\"]) : null\r\n  ]);\r\n};\r\n\r\n// Starts the renderLoop, which renders the virtual DOM at the right moments\r\ndomplotter.renderLoop(document.body, render, {});\r\n```\r\nThe h() function is used to create virtual DOM nodes using a technique known as 'virtual hyperscript'.\r\n\r\nThe renderLoop schedules the `render()` function to be executed on requestAnimationFrame when needed. \r\nThe renderLoop automatically schedules a render when a registered eventhandler on the DOM is called.\r\n\r\n## Speed\r\n\r\nThe first question that people usually ask when they are new to virtual DOM is, how well does it perform?\r\nAfter all, rendering the whole represenation of the DOM and determining the difference with the \r\nprevious render seems slow.\r\nIn my experience, rendering and diffing a large screen (say 5000 DOM nodes) is easily done within a single \r\nframe (16ms) on modern devices. May the speed become an issue, domplotter also has a powerful caching\r\nmechanism which speeds up rendering and diffing significantly.\r\n\r\n## Animated transitions\r\n\r\nDomplotter allows adding and removing DOM nodes to be animated. \r\nIt needs a transition plugin to do so. Right now the only available plugin uses VelocityJS.\r\nA plugin which uses CSS Transitions will be developed soon. Follow the steps below to animate transitions:\r\n\r\n* Add the velocity.js and velocityTransitions.js to the page (using script tags or requireJS)\r\n* Add the `transitions: velocityTransitions` option to the renderLoop.\r\n* Add enterAnimation and exitAnimation properties to the nodes that need to be animated.\r\nThe value for this property is the first argument for the velocity.animate function. \r\nYou can use \"slideDown\" as enterAnimation and \"slideUp\" as exitAnimation for example.\r\n* Enjoy!\r\n\r\nMore info can be found in the [API Reference](docs/API.md).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
